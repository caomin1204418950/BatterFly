import { Component, OnInit} from '@angular/core'

import { FormGroup, FormControl, Validators } from '@angular/forms'
import { ActivatedRoute } from '@angular/router'


// import { PopService } from '../../../../shared/services/pop/pop.service'
import { InterfaceService } from '../../../../shared/services/http/interfaces.service'

@Component({
	selector: 'app-modify',
	templateUrl: './modify.component.html',
	styleUrls: [ './modify.component.scss' ]
})
export class ModifyComponent implements OnInit {
	detailForm: FormGroup
	submitted: boolean

	toast = {
		position: 'center-center',
	}

	public department
	public items
	public id

	constructor(
		private route: ActivatedRoute, 
		private interfaceService: InterfaceService,
		) {
		this.items = new Items()

		const account = new FormControl(this.items.account,Validators.nullValidator)
		const name = new FormControl()
		const mobile = new FormControl('', Validators.pattern(/^((1[3,5,8][0-9])|(14[5,7])|(17[0,6,7,8]))\d{8}$/))
		const departmentId = new FormControl()
		const jobName = new FormControl()
		const occupationClass = new FormControl()
		const status = new FormControl()
		const sex = new FormControl(null, Validators.nullValidator)
		const remark = new FormControl(null, Validators.nullValidator)

		this.detailForm = new FormGroup({
			account: account,
			name: name,
			mobile: mobile,
			departmentId: departmentId,
			jobName: jobName,
			occupationClass: occupationClass,
			status: status,
			sex: sex,
			remark: remark
		})
	}

	ngOnInit() {
		this.id = this.route.snapshot.queryParams.id
		this.getDepartment()
		this.user()
	}

	user() {
		this.interfaceService.getUserDetail(this.id).then(data => {
			if(!data) return
			this.items.account = data.account
			this.items.name = data.name
			this.items.mobile = data.mobile
			this.items.departmentName = data.departmentName
			this.items.departmentId = data.departmentId
			this.items.jobName = data.jobName
			this.items.occupationClass = data.occupationClass
			this.items.status = data.status
			this.items.sex = data.sex
			this.items.remark = data.remark 
		})
	}
	reset() {
		this.detailForm.reset()
		
    this.items.status = 1
	}

	onSubmit() {
		this.submitted = true
		for (var i = 0; i < this.department.length; i++) {
			if (this.items.departmentId === this.department[i].id) {
				this.items.departmentName = this.department[i].fullName
			}
		}
		this.interfaceService.saveUser(this.id,this.items).then(result => {
			if(result) this.goBack()
		})
	}

	getDepartment() {
		this.interfaceService.getDepartmentList().then(result => {
			this.department = result
		})
	}

	goBack() {
		history.go(-1)
	}
}

class Items {
	constructor(
		public account?: String,
		public name?: String,
		public mobile?: String,
		public departmentId?: String,
		public departmentName?: String,
		public jobName?: String,
		public occupationClass?: String,
		public status?: any,
		public sex?: any,
		public remark?: String
	) {}
}
