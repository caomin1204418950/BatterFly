import { Component, OnInit, ViewChild } from '@angular/core'
import { FormGroup, FormControl } from '@angular/forms'
import { animate, style, transition, trigger } from '@angular/animations'

import { InterfaceService } from '../../../shared/services/http/interfaces.service'
import { PopService } from '../../../shared/services/pop/pop.service'

declare var $: any

@Component({
	selector: 'app-role-manage',
	templateUrl: './role-manage.component.html',
	styleUrls: [
		'../../../../assets/icon/menu/iconfont.css',
		'../../../../assets/icon/operate/iconfont.css',
		'./role-manage.component.scss'
	],
	animations: [
		trigger('fadeInOutTranslate', [
			transition(':enter', [ style({ opacity: 0 }), animate('400ms ease-in-out', style({ opacity: 1 })) ]),
			transition(':leave', [
				style({ transform: 'translate(0)' }),
				animate('400ms ease-in-out', style({ opacity: 0 }))
			])
		])
	]
})
export class RoleManageComponent implements OnInit {
	@ViewChild('modalDefault') modalDefault
	rows = [
		{
			name: 'zs',
			roleKey: '1',
			updateDate: '2018-10-10',
			status: '1'
		},
	]
	appLists = []
	addForm: FormGroup

	public items
	public searchItems
	public modalTitle: String
	public modalStatus

	public total
	public totalPage
	public pageNum

	public roleId
	public authLists = []
	public selectedNodes = []

	public appId: String
	public roleStatus: boolean

	public roleManageStatus: Number

	toast = {
		position: 'center-center',
		title: '提示',
		msg: '',
		showClose: true,
		theme: 'material',
		type: 'success',
		closeOther: false
	}

	setting = {
		view: {
			showLine: false,
			showIcon: false,
			showTitle: false,
			nameIsHTML: true
		},
		check: {
			enable: true,
			chkDisabled: true,
			chkDisabledInherit: true,
			chkboxType: { Y: 'ps', N: 'ps' }
		},
		data: {
			simpleData: {
				enable: true
			}
		}
	}

	constructor(
		private interfaceService: InterfaceService,
		private popService: PopService
	) {
		this.items = new Items()
		this.searchItems = new Items()
		this.roleManageStatus = 1
		this.roleStatus = false
		this.addForm = new FormGroup({
			name: new FormControl(),
			remark: new FormControl(),
			status: new FormControl(),
			roleKey: new FormControl()
		})
	}

	ngOnInit() {
		// this.search(1, '')
		this.getApp()
		this.statusInit()
	}
	statusInit() {
		this.items.status = 1
		this.searchItems.status = ''
	}
	changeTitle(title, status) {
		this.items.status = 1
		this.modalTitle = title
		this.modalStatus = status
	}
	search(e, type) {
		if (!type) {
			this.searchItems = new Items()
			this.statusInit()
		}
		this.searchItems = Object.assign(this.searchItems, { pageNum: e, pageSize: 10 })
		this.interfaceService.getRoleList(this.searchItems).then((result) => {
			this.rows = result.list
			this.total = result.total
			this.totalPage = result.pages
			this.pageNum = result.pageNum
		})
	}
	reset() {
		this.searchItems.name = ''
		this.searchItems.status = ''
	}
	add(value) {}
	modify(value) {
		this.items.id = value.id
		this.items.name = value.name
		this.items.remark = value.remark
		this.items.status = value.status
		this.items.roleKey = value.roleKey
	}
	onSubmit() {
		this.interfaceService.saveRole(this.addForm.value, this.modalStatus, this.items.id).then((result) => {
			if (result) {
				this.popService.addToast({ type: 'success', msg: '成功' })
				this.modalDefault.hide()

				this.search(1, '')
				this.rows = []
				this.addForm.reset()
			}
		})
	}
	getApp() {
		this.interfaceService.getApps().then(result => {
			this.appLists = result
		})
	}
	getAuth(appId, id) {
		this.interfaceService.getRolePermission(appId,id).then(result => {
			this.authLists = []
			this.authLists = result
			$.fn.zTree.init($('#ztree'), this.setting, this.authLists)
		})
	}
	selectNode() {
		let treeObj = $.fn.zTree.getZTreeObj('ztree')
		this.selectedNodes = treeObj.getNodesByParam('checked', true, null)
		var selectedNodesId = { permissionId: [] }
		var count = 0
		for (var i = 0; i < this.selectedNodes.length; i++) {
			selectedNodesId.permissionId[count] = this.selectedNodes[i].id
			count++
		}
		this.interfaceService.setRolePermission(this.roleId,this.appId,selectedNodesId).then(result => {
			if(result) {
				this.popService.addToast({type: 'success',msg: '成功'})
			}
		})
		this.rows = []
		this.search(1, '')
	}
	auth(value) {
		if (value.status == 0) {
			this.roleStatus = false
		} else {
			this.roleStatus = true
		}
		this.roleManageStatus = this.items.status
		$.fn.zTree.init($('#ztree'))
		this.roleId = value.id
		this.changeApp(this.appLists[0])
		this.appLists[0].active = true
	}

	changeApp(value) {
		this.appId = value.appId
		this.getAuth(this.appId, this.roleId)
		this.authHide()
	}

	authHide() {
		for (var i = 0; i < this.appLists.length; i++) {
			this.appLists[i].active = false
		}
	}

	changePage(e) {
		this.search(e, '')
	}

	switchange(row) {
		var status = null 
		if (row.status == 0) {
			status = 1
		} else if (row.status == 1) {
			status = 0
		}
		this.interfaceService.updateRole({id:row.id,status:status}).then(result => {
			if(result) {
				this.popService.addToast({type: 'success',msg: '状态修改成功'})
				this.search(1, '')
			}
		})
	}
}
class Items {
	constructor(
		public name?: String,
		public status?: any,
		public remark?: String,
		public roleKey?: String,
		public id?: String,
		public createDate?: String,
		public updateDate?: String
	) {}
}
