import { Component, OnInit } from '@angular/core'
import { PopService } from '../../../shared/services/pop/pop.service'
import { InterfaceService } from '../../../shared/services/http/interfaces.service'
declare var $: any

@Component({
	selector: 'app-employee',
	templateUrl: './employee.component.html',
	styleUrls: [
		'../../../../assets/icon/menu/iconfont.css',
		'../../../../assets/icon/operate/iconfont.css',
		'./employee.component.scss'
	]
})
export class EmployeeComponent implements OnInit {
	public items
	public nodes
	public selectedNodes
	public modalTitle: String
	public modalStatus
	public department
	public userInfo

	public total
	public totalPage
	public pageNum

	rows = []
	toast = {
		position: 'center-center',
	}

	public selectData = []
	public userId
	public checkAuth: boolean
	public roleAuthLists = []
	public roleSelect = { roleId: [] }

	public roleSelectCheck = []

	public roleSelectList = []

	public userStatus: boolean

	constructor(
		private interfaceService: InterfaceService,
		private popService: PopService
	) {
		this.userStatus = true
		this.items = new Items()
		this.userInfo = new Items()
	}

	setting = {
		view: {
			showLine: false,
			showIcon: false,
			showTitle: false,
			fontCss: { color: '#333!important' },
			nameIsHTML: true
			// dblClickExpand: false
		},
		check: {
			enable: true,
			chkboxType: { Y: 'ps', N: 'ps' }
		},
		data: {
			simpleData: {
				enable: true
			}
		}
	}
	zNodes = []

	ngOnInit() {
		this.items.status = ''
		this.items.departmentId = ''
		this.getDepartment()
		this.search(1, '')
	}
	// 查询
	search(e, type) {
		if (!type) {
			this.items = new Items()
			this.items.status = ''
			this.items.departmentId = ''
		}
		if (this.items.account || this.items.name || this.items.mobile || this.items.departmentId) {
			this.items.account = this.items.account
			this.items.name = this.items.name
			this.items.mobile = this.items.mobile
			this.items.departmentId = this.items.departmentId
		}
		const searchItem = Object.assign(this.items, { pageNum: e, pageSize: 10 })
		this.interfaceService.usersSearch(searchItem).then((result) => {
			this.rows = result.list
			this.total = result.total
			this.totalPage = result.pages
			this.pageNum = result.pageNum
		})
	}
	// 重置
	reset() {
		this.items = new Items()
		this.items.status = ''
		this.items.departmentId = ''
	}
	// 修改弹出层的标题
	changeTitle(title, status) {
		this.modalTitle = title
		this.modalStatus = status
	}
	// 获取允许使用的部门列表
	getDepartment() {
		this.interfaceService.getDepartmentList().then((result) => {
			this.department = result
		})
	}
	// 修改状态开关
	switchange(row) {
		var status = null
		if (row.status == 0) {
			status = 1
		} else if (row.status == 1) {
			status = 0
		}
		this.interfaceService.updateUser({ id: row.id, status: status }).then((result) => {
			if (result) {
				this.popService.addToast({ type: 'success', msg: '状态修改成功' })
			}
			this.rows = []
			this.search(1, '')
		})
	}
	// 获取用户详细信息
	user(id) {
		this.interfaceService.getUserDetail(id).then((result) => {
			this.userInfo = result
		})
	}
	// 无操作弹出层 打开
	openMyModal(event, row) {
		document.querySelector('#' + event).classList.add('md-show')
		this.user(row.id)
	}
	// 无操作弹出层 关闭
	closeMyModal(event) {
		event.target.parentElement.parentElement.parentElement.classList.remove('md-show')
	}
	// 重置密码
	resetPass(row) {
		if (row.status == 0) {
      this.popService.addToast({ msg: '员工被禁用，不能执行该操作!', type: 'warning' })
		} else {
			this.interfaceService.resetUserPassword(row.id).then((res) => {
				if (res) {
					this.popService.addToast({ type: 'success', msg: '重置密码成功！' })
					this.search(1, '')
				}
			})
		}
	}


	// 获取行政区域
	getArea(value) {
		if (value.status == 0) {
			this.userStatus = false
		} else {
			this.userStatus = true
		}
		this.userId = value.id
		$.fn.zTree.init($('#ztree'))
		this.interfaceService.getUserAreaTree(this.userId).then((res) => {
			this.zNodes = res
			$.fn.zTree.init($('#ztree'), this.setting, this.zNodes)
		})
	}
	// 获取选中的行政区域
	selectTree() {
		let treeObj = $.fn.zTree.getZTreeObj('ztree')
		this.selectedNodes = treeObj.getNodesByParam('checked', true, null)
		var selectedNodesId = { areaId: [] }
		var count = 0
		for (var i = 0; i < this.selectedNodes.length; i++) {
			selectedNodesId.areaId[count] = this.selectedNodes[i].id
			count++
		}
		this.interfaceService.setUserSelectTreeArea(this.userId, selectedNodesId).then((res) => {
			if (res) {
				this.popService.addToast({ type: 'success', msg: '成功' })
			}
			this.rows = []
			this.search(1, '')
		})
	}
	getRoleAuth(id) {
		this.interfaceService.getUserRoleAuth(id).then((result) => {
			this.roleAuthLists = []
			setTimeout(() => {
				this.roleAuthLists = result
				for (var i = 0; i < this.roleAuthLists.length; i++) {
					if (this.roleAuthLists[i].disable == '1') {
						this.roleSelect.roleId.push(this.roleAuthLists[i].roleId)
					}
				}
				this.roleSelectList = this.roleSelect.roleId
			}, 10)
		})
	}
	// 角色指派
	role(value) {
		if (value.status == 0) {
			this.userStatus = false
		} else {
			this.userStatus = true
		}
		this.roleSelect.roleId = []
		this.roleSelectList = []
		this.userId = value.id
		this.getRoleAuth(this.userId)
	}
	checkChange(item) {
		if (item.disable == '1') {
			item.disable = '0'
			if (this.roleSelect.roleId.length > 0) {
				this.roleSelect.roleId = this.roleSelect.roleId.filter((e) => e != item.roleId)
			}
		} else if (item.disable == '0') {
			item.disable = '1'
			this.roleSelect.roleId.push(item.roleId)
		}
	}
	roleAuthChecked() {
		if (this.roleSelectList.length === 0 && this.roleSelect.roleId.length === 0) {
      this.popService.addToast({ msg: '请选择角色', type: 'warning' })
		} else {
			this.interfaceService.appointRoleAuth(this.userId, this.roleSelect.roleId).then((result) => {
				if (result) {
					this.popService.addToast({ msg: '成功', type: 'success' })
					this.rows = []
					this.search(1, '')
				}
			})
		}
	}

	changePage(e) {
		this.search(e, '')
	}
}
class Items {
	constructor(
		public account?: String,
		public name?: String,
		public mobile?: String,
		public status?: any,
		public departmentId?: String
	) {}
}
