import { Component, OnInit } from '@angular/core'
import { FormGroup, FormControl, Validators } from '@angular/forms'
// import { HttpServe } from '../../../shared/services/http/http-serve.service'
// import { ToastData, ToastOptions, ToastyService } from 'ng2-toasty'

import { InterfaceService } from '../../../shared/services/http/interfaces.service'
import { PopService } from '../../../shared/services/pop/pop.service'

@Component({
	selector: 'app-authority',
	templateUrl: './authority.component.html',
	styleUrls: [
		'../../../../assets/icon/menu/iconfont.css',
		'../../../../assets/icon/operate/iconfont.css',
		'./authority.component.scss'
	]
})
export class AuthorityComponent implements OnInit {
	rows = []
	appLists = []
	appId
	addForm: FormGroup
	menuUrlActive = false

	public items
	public modalTitle: String
	public modalStatus

	public total
	public totalPage
	public pageNum

	public parentAuth = []

	// 权限状态
	public permissionStatus: Number

	// 权限类型
	public permissionType: Number

	toast = {
		position: 'center-center',
		title: '提示',
		msg: '',
		showClose: true,
		theme: 'material',
		type: 'success',
		closeOther: false
	}

	constructor(
		private interfaceService: InterfaceService,
		private popService: PopService
	) {
		this.items = new Items()
		this.permissionStatus = 1
		this.permissionType = 1
	}

	ngOnInit() {
		this.getApp()
		this.formInit()
		this.items.status = 1
		this.items.type = 1
	}
	formInit() {
		this.addForm = new FormGroup({
			appId: new FormControl(),
			appName: new FormControl(),
			name: new FormControl(),
			sort: new FormControl('', Validators.pattern(/^[1-9]\d{0,1}$/)),
			type: new FormControl(),
			menuUrl: new FormControl(),
			resourceName: new FormControl(),
			status: new FormControl(),
			parentId: new FormControl()
		})
	}
	getApp() {
		this.interfaceService.getApps().then((result) => {
			this.appLists = result
			if (this.appLists.length > 0 && !this.appId) {
				this.appId = this.appLists[0].appId
			}
			if (this.appId) {
				this.search(this.appId)
				this.parentAuth = this.rows
			}
		})
	}
	search(e) {
		this.interfaceService.getPermissionsByAppId(e).then((result) => {
			this.rows = result
			this.parentAuth = result
		})
	}

	addPermission(e) {
    if (!this.parentAuth) this.search(e)
	}

	getParent(appId) {
		this.addPermission(appId)
	}
	changeTitle(title, status) {
		this.items.status = 1
		this.items.type = 1
		this.modalTitle = title
		this.modalStatus = status
		if (status == 'add') {
			this.items.parentId = ' '
		}
	}
	add() {
		// 设置状态
		this.permissionStatus = 1

		// 设置类型
		this.permissionType = 1
		this.items.appId = this.appId
		this.getParent(this.appId)
		this.items.parentId = ''
	}
	addChild(value) {
		// 设置状态
		this.permissionStatus = 1

		// 设置类型
		this.permissionType = 1
		this.items.appId = value.appId
		this.items.appName = value.appName
		this.items.code = value.code
		this.items.type = 1
		this.items.status = 1
		this.items.authId = value.id
		if (value) {
			if (value.status == 0 || value.stauts == '0') {
        this.popService.addToast({ type: 'warning', msg: '该权限已被禁用，此操作不可用' })
			} else {
				this.items.parentId = value.id
				this.items.deep = value.deep
				this.items.parentName = value.name
			}
		}
	}
	modify(value) {
		if (value) {
			this.permissionStatus = value.status
			// 设置类型
			this.permissionType = value.type
			this.setValue(value)
			this.interfaceService.getPermissionsById({ appId: this.appId, id: value.id }).then((result) => {
				this.parentAuth = result
				if (value.parentId) {
					this.items.parentId = value.parentId
				} else {
					this.items.parentId = ''
				}
			})
		}
	}
	setValue(value) {
		this.items.appId = value.appId
		this.items.appName = value.appName
		this.items.code = value.code
		this.items.name = value.name
		this.items.type = value.type
		this.items.sort = value.sort
		this.items.status = value.status
		this.items.menuUrl = value.menuUrl
		this.items.resourceName = value.resourceName
		this.items.authId = value.id
	}
	menuUrlBlur() {
		this.menuUrlActive = true
	}
	onSubmit() {
		for (var i = 0; i < this.appLists.length; i++) {
			if (this.items.appId == this.appLists[i].appId) {
				this.items.appName = this.appLists[i].appName
			}
		}
		if (!this.items.appId || !this.items.parentId || !this.items.code) {
			this.items.appId = this.items.appId ? this.items.appId : ''
			this.items.parentId = this.items.parentId ? this.items.parentId : ''
			this.items.code = this.items.code ? this.items.code : ''
		}
		if (this.permissionType != 2) {
			this.items.menuUrl = ''
		}
		this.items.status = this.permissionStatus
		this.items.type = this.permissionType
		this.interfaceService.savePermission(this.items, this.modalStatus, this.items.authId).then((result) => {
			if (result) {
				this.popService.addToast({ type: 'success', msg: '成功' })
			}
			this.search(this.items.appId)
			this.rows = []
			this.getApp()
			this.items = new Items()
			this.addForm.reset()
			this.items.status = 1
			this.items.type = 1
		})
	}

	switchange(row) {
		// console.log(row.id)
		var status = null
		if (row.status == 0) {
			status = 1
		} else if (row.status == 1) {
			status = 0
		}
		this.interfaceService.updatePerimission({ id: row.id, status: status }).then((result) => {
			if (result) {
				this.popService.addToast({ type: 'success', msg: '状态修改成功' })
				this.rows = []
				this.getApp()
			}
		})
	}
}
class Items {
	constructor(
		public appId?: String,
		public appName?: String,
		public name?: String,
		public sort?: Number,
		public type?: Number,
		public menuUrl?: String,
		public resourceName?: String,
		public parentId?: String,
		public code?: String,
		public authId?: String,
		public status?: Number
	) {}
}
